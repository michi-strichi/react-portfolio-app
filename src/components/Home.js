import React, { useState, useRef, Suspense } from 'react'
import { Canvas } from '@react-three/fiber';
import { OrbitControls, useGLTF, PerspectiveCamera } from '@react-three/drei';
import './styles/Home.scss';
import { MeshBasicMaterial } from 'three';
import { randFloat } from 'three/src/math/MathUtils';

function Michi_Model({ ...props }) {
    const group = useRef()
    const { nodes, materials } = useGLTF('/Michi_3D_smiling.glb')
    return (
        <group ref={group} {...props} dispose={null}>
            <mesh position={[0, 0, 0]} rotation={[0, 0, 0]} scale={[1, 1, 1]} geometry={nodes.michi_smiling.geometry} material={materials['Michi_FINAL_MAT.002']} />
        </group>
    )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


function Dandelion_Model({ ...props }) {
    const group = useRef()
    const { nodes, materials } = useGLTF('/planetModels_TEST/dandelion_TEST.glb')
    return (
        <group ref={group} {...props} dispose={null}>
            <mesh position={props.pos} geometry={nodes.dandelion.geometry} material={materials.dandelion_mat} />
        </group>
    )
}
useGLTF.preload('/planetModels_TEST/dandelion_TEST.glb')

function Klee_Model({ ...props }) {
    const group = useRef()
    const { nodes, materials } = useGLTF('/planetModels_TEST/klee_TEST.glb')
    return (
        <group ref={group} {...props} dispose={null}>
            <mesh position={props.pos} geometry={nodes.klee.geometry} material={materials.klee_mat} />
        </group>
    )
}
useGLTF.preload('/planetModels_TEST/klee_TEST.glb')

function Planet_Model({ ...props }) {
    const group = useRef()
    const { nodes, materials } = useGLTF('planetModels_TEST//planet_TEST.glb')
    return (
        <group ref={group} {...props} dispose={null}>
            <mesh position={props.pos} geometry={nodes.planet.geometry} material={materials.planet_mat} />
        </group>
    )
}
useGLTF.preload('/planetModels_TEST/planet_TEST.glb')

function Shroom_Model({ ...props }) {
    const group = useRef()
    const { nodes, materials } = useGLTF('/planetModels_TEST/shroom_TEST.glb')
    return (
        <group ref={group} {...props} dispose={null}>
            <mesh position={props.pos} geometry={nodes.mushroom.geometry} material={materials.shroom_mat} />
        </group>
    )
}
useGLTF.preload('/planetModels_TEST/shroom_TEST.glb')


const Home = ({ theme }) => {

    const [klees, setKlees] = useState([[3, 3, 3], [1, 1, 1]]);
    // const [dandelions, setDandelions] = useState([]);
    // const [mushrooms, setMushrooms] = useState([]);

    const addKlee = (pos) => {
        setKlees([...klees, pos]);
        console.log(klees);
    }

    return (
        <div className={'Home' + ' ' + theme}>
            <button onClick={() => addKlee([randFloat(-3,3), randFloat(-3,3), randFloat(-3,3)])} className='button'> click me!</button>

            <div className='CanvasWrapper'>
                <Canvas>
                    <OrbitControls />
                    <ambientLight intensity={1} />
                    <Suspense fallback={null}>
                        <Planet_Model pos={[0, 0, 0]} />

                        {/* <Dandelion_Model pos={[1, 2, 0]} /> */}
                        {/* <Klee_Model pos={[0, 2, 1]} /> */}
                        {/* <Shroom_Model pos={[0, 2, -1]} /> */}

                        {klees.map((klee, index) => (
                            <Klee_Model key={index} pos={klee} />
                        ))}

                    </Suspense>
                </Canvas>
                {/* {
                    klees.map((klee, key) => (
                        <div key={key} >{klee[key]}</div>
                    ))
                } */}
            </div>
        </div>
    )
}

export default Home